const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const QRCode = require('qrcode');
const fs = require('fs');
const path = require('path');
const express = require('express');

// Configuration
const ADMIN_NUMBER = '237679199601@c.us';
const DATA_FILE = path.join(__dirname, 'users_data.json');
const USAGE_DURATION = 30 * 24 * 60 * 60 * 1000; // 30 jours
const SESSION_PATH = path.join(__dirname, '.wwebjs_auth');

// Variables globales
let userData = {
    users: {},
    accessCodes: {},
    groups: {}
};

let isReady = false;
let hasValidSession = false;
let currentQR = null;
let qrExpireTimeout = null;

// Serveur Express pour afficher le QR code
const app = express();
const PORT = 3000;
let server = null;

// Page HTML pour le QR code
app.get('/', (req, res) => {
    if (currentQR) {
        res.send(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>WhatsApp Bot - Connexion</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        min-height: 100vh;
                        background: linear-gradient(135deg, #25D366, #128C7E);
                        color: white;
                        margin: 0;
                        padding: 20px;
                        box-sizing: border-box;
                    }
                    .container {
                        text-align: center;
                        background: rgba(255,255,255,0.1);
                        padding: 30px;
                        border-radius: 20px;
                        backdrop-filter: blur(15px);
                        box-shadow: 0 10px 40px rgba(0,0,0,0.3);
                        max-width: 500px;
                        width: 100%;
                    }
                    .qr-container {
                        background: white;
                        padding: 20px;
                        border-radius: 15px;
                        margin: 20px auto;
                        display: inline-block;
                        box-shadow: 0 5px 20px rgba(0,0,0,0.2);
                    }
                    .qr-container img {
                        max-width: 280px;
                        width: 100%;
                        height: auto;
                        display: block;
                    }
                    .instructions {
                        line-height: 1.6;
                        margin: 20px 0;
                    }
                    .step {
                        background: rgba(255,255,255,0.1);
                        padding: 12px;
                        border-radius: 10px;
                        margin: 8px 0;
                        border-left: 3px solid #25D366;
                    }
                    .warning {
                        background: rgba(255,193,7,0.2);
                        padding: 15px;
                        border-radius: 10px;
                        margin: 20px 0;
                        border-left: 4px solid #ffc107;
                        font-size: 14px;
                    }
                    .countdown {
                        font-size: 18px;
                        font-weight: bold;
                        color: #ffc107;
                        margin: 15px 0;
                    }
                    .refresh-btn {
                        background: #25D366;
                        color: white;
                        border: none;
                        padding: 12px 25px;
                        border-radius: 25px;
                        font-size: 14px;
                        cursor: pointer;
                        margin: 10px;
                        transition: all 0.3s;
                        font-weight: bold;
                    }
                    .refresh-btn:hover {
                        background: #128C7E;
                        transform: translateY(-2px);
                        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                    }
                    .status {
                        background: rgba(37, 211, 102, 0.2);
                        padding: 10px;
                        border-radius: 10px;
                        margin: 15px 0;
                        font-size: 14px;
                    }
                    @media (max-width: 600px) {
                        .container { padding: 20px; margin: 10px; }
                        .qr-container img { max-width: 240px; }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üì± Connexion WhatsApp</h1>
                    
                    <div class="warning">
                        ‚ö†Ô∏è <strong>IMPORTANT:</strong> Cette connexion est n√©cessaire uniquement lors de la premi√®re utilisation ou apr√®s d√©connexion.
                    </div>
                    
                    <div class="qr-container">
                        <img src="data:image/png;base64,${currentQR}" alt="QR Code WhatsApp" />
                    </div>
                    
                    <div class="countdown" id="countdown">QR Code expire dans 45 secondes</div>
                    
                    <div class="instructions">
                        <h3>üìã Instructions:</h3>
                        
                        <div class="step">
                            <strong>1.</strong> Ouvrez WhatsApp sur votre t√©l√©phone
                        </div>
                        
                        <div class="step">
                            <strong>2.</strong> Appuyez sur ‚ãÆ (menu) ‚Üí "Appareils li√©s"
                        </div>
                        
                        <div class="step">
                            <strong>3.</strong> S√©lectionnez "Lier un appareil"
                        </div>
                        
                        <div class="step">
                            <strong>4.</strong> Scannez le QR code ci-dessus
                        </div>
                    </div>
                    
                    <div class="status">
                        üîÑ Actualisation automatique toutes les 45 secondes
                    </div>
                    
                    <button class="refresh-btn" onclick="location.reload()">
                        üîÑ Actualiser maintenant
                    </button>
                </div>
                
                <script>
                    let timeLeft = 45;
                    const countdownEl = document.getElementById('countdown');
                    
                    const timer = setInterval(() => {
                        timeLeft--;
                        countdownEl.textContent = \`QR Code expire dans \${timeLeft} secondes\`;
                        
                        if (timeLeft <= 0) {
                            clearInterval(timer);
                            location.reload();
                        }
                    }, 1000);
                </script>
            </body>
            </html>
        `);
    } else {
        res.send(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>WhatsApp Bot - √âtat</title>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        min-height: 100vh;
                        background: linear-gradient(135deg, #25D366, #128C7E);
                        color: white;
                        margin: 0;
                        padding: 20px;
                    }
                    .container {
                        text-align: center;
                        background: rgba(255,255,255,0.1);
                        padding: 40px;
                        border-radius: 20px;
                        backdrop-filter: blur(15px);
                        box-shadow: 0 10px 40px rgba(0,0,0,0.3);
                    }
                    .status-icon { font-size: 64px; margin: 20px 0; }
                    .close-btn {
                        background: rgba(255,255,255,0.2);
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 15px;
                        cursor: pointer;
                        margin-top: 20px;
                        font-size: 14px;
                    }
                    .close-btn:hover {
                        background: rgba(255,255,255,0.3);
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="status-icon">‚úÖ</div>
                    <h1>Bot WhatsApp Connect√©!</h1>
                    <p>Le bot est maintenant op√©rationnel et connect√©.</p>
                    <p style="font-size: 14px; opacity: 0.8;">
                        Plus besoin de QR code.<br>
                        Les prochaines connexions seront automatiques.
                    </p>
                    <button class="close-btn" onclick="window.close()">
                        Fermer cette page
                    </button>
                </div>
                
                <script>
                    // Fermer automatiquement apr√®s 10 secondes
                    setTimeout(() => {
                        window.close();
                    }, 10000);
                </script>
            </body>
            </html>
        `);
    }
});

// D√©marrer le serveur web seulement quand n√©cessaire
function startWebServer() {
    if (!server) {
        server = app.listen(PORT, () => {
            console.log(`üåê Interface QR Code: http://localhost:${PORT}`);
            console.log(`üì± Ouvrez cette URL pour scanner le QR code`);
        });
    }
}

// Arr√™ter le serveur web
function stopWebServer() {
    if (server) {
        server.close();
        server = null;
        console.log('üåê Serveur web ferm√©');
    }
}

// V√©rifier si une session existe
function checkExistingSession() {
    try {
        hasValidSession = fs.existsSync(SESSION_PATH) && fs.readdirSync(SESSION_PATH).length > 0;
        return hasValidSession;
    } catch (error) {
        console.error('‚ùå Erreur v√©rification session:', error.message);
        return false;
    }
}

// Fonctions utilitaires
function loadData() {
    try {
        if (fs.existsSync(DATA_FILE)) {
            const data = fs.readFileSync(DATA_FILE, 'utf8');
            if (data.trim()) {
                const parsed = JSON.parse(data);
                userData = { 
                    users: {},
                    accessCodes: {},
                    groups: {},
                    ...parsed 
                };
                console.log('‚úÖ Donn√©es utilisateur charg√©es');
                return true;
            }
        }
        console.log('üìù Nouveau fichier de donn√©es cr√©√©');
        saveData();
        return true;
    } catch (error) {
        console.error('‚ùå Erreur chargement donn√©es:', error.message);
        return false;
    }
}

function saveData() {
    try {
        cleanupExpiredData();
        const dataToSave = {
            ...userData,
            lastSave: Date.now()
        };
        
        fs.writeFileSync(DATA_FILE, JSON.stringify(dataToSave, null, 2));
        return true;
    } catch (error) {
        console.error('‚ùå Erreur sauvegarde:', error.message);
        return false;
    }
}

function cleanupExpiredData() {
    const now = Date.now();
    let cleaned = false;
    
    // Nettoyer codes d'acc√®s expir√©s (24h)
    Object.keys(userData.accessCodes).forEach(phone => {
        const codeData = userData.accessCodes[phone];
        if (now - codeData.generated > 24 * 60 * 60 * 1000) {
            delete userData.accessCodes[phone];
            cleaned = true;
        }
    });
    
    // Nettoyer utilisateurs expir√©s
    Object.keys(userData.users).forEach(phone => {
        const user = userData.users[phone];
        if (user.authorized && (now - user.authorizedAt) >= USAGE_DURATION) {
            user.authorized = false;
            cleaned = true;
        }
    });
    
    if (cleaned) {
        console.log('üßπ Donn√©es expir√©es nettoy√©es');
    }
}

function generateAccessCode(phoneNumber) {
    // Format: XXXX XXXX (8 caract√®res au total)
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 8; i++) {
        if (i === 4) code += ' '; // Espace au milieu
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    userData.accessCodes[phoneNumber] = {
        code: code,
        generated: Date.now(),
        used: false
    };
    saveData();
    return code;
}

function isUserAuthorized(phoneNumber) {
    const user = userData.users[phoneNumber];
    if (!user || !user.authorized) return false;
    
    const now = Date.now();
    const isValid = (now - user.authorizedAt) < USAGE_DURATION;
    
    if (!isValid && user.authorized) {
        user.authorized = false;
        saveData();
        return false;
    }
    
    return isValid;
}

function validateAccessCode(phoneNumber, inputCode) {
    const accessData = userData.accessCodes[phoneNumber];
    if (!accessData || accessData.used) {
        return false;
    }
    
    // Normaliser les codes (supprimer espaces et mettre en majuscules)
    const normalizedInput = inputCode.replace(/\s/g, '').toUpperCase();
    const normalizedStored = accessData.code.replace(/\s/g, '').toUpperCase();
    
    if (normalizedInput !== normalizedStored) {
        return false;
    }
    
    // V√©rifier expiration (24h)
    const now = Date.now();
    if (now - accessData.generated > 24 * 60 * 60 * 1000) {
        delete userData.accessCodes[phoneNumber];
        saveData();
        return false;
    }
    
    // Marquer comme utilis√© et autoriser l'utilisateur
    accessData.used = true;
    userData.users[phoneNumber] = {
        authorized: true,
        authorizedAt: Date.now(),
        phoneNumber: phoneNumber
    };
    
    saveData();
    return true;
}

function formatPhoneNumber(number) {
    // Supprimer tous les caract√®res non num√©riques sauf le +
    let cleaned = number.replace(/[^\d+]/g, '');
    
    // Si commence par +, garder le +
    if (number.startsWith('+')) {
        cleaned = '+' + cleaned.substring(1);
    }
    
    // Ajouter @c.us si pas d√©j√† pr√©sent
    if (!cleaned.includes('@')) {
        cleaned += '@c.us';
    }
    
    return cleaned;
}

// Configuration client WhatsApp
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "whatsapp-bot-v2",
        dataPath: SESSION_PATH
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-web-security',
            '--no-first-run',
            '--disable-gpu',
            '--disable-features=VizDisplayCompositor',
            '--disable-extensions'
        ],
        timeout: 60000
    },
    webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
    }
});

// Gestion des √©v√©nements WhatsApp
client.on('qr', async (qr) => {
    console.log('\nüîÑ G√©n√©ration du QR Code...');
    
    try {
        // G√©n√©rer le QR code en base64
        const qrBase64 = await QRCode.toDataURL(qr, {
            errorCorrectionLevel: 'M',
            type: 'image/png',
            quality: 0.92,
            margin: 2,
            width: 300,
            color: {
                dark: '#000000',
                light: '#FFFFFF'
            }
        });
        
        currentQR = qrBase64.split(',')[1]; // Enlever le pr√©fixe
        
        // D√©marrer le serveur web pour afficher le QR
        startWebServer();
        
        console.log('\nüì± QR CODE G√âN√âR√â');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`üåê Interface: http://localhost:${PORT}`);
        console.log('‚è∞ QR Code expire dans 45 secondes');
        console.log('üîÑ Actualisation automatique');
        
        // Expirer le QR code apr√®s 45 secondes
        if (qrExpireTimeout) {
            clearTimeout(qrExpireTimeout);
        }
        
        qrExpireTimeout = setTimeout(() => {
            currentQR = null;
            console.log('‚è∞ QR Code expir√© - Nouveau QR en cours...');
        }, 45000);
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration QR:', error.message);
    }
});

client.on('ready', async () => {
    isReady = true;
    currentQR = null;
    
    // Arr√™ter le serveur web
    setTimeout(stopWebServer, 2000);
    
    console.log('\nüéâ BOT WHATSAPP CONNECT√â AVEC SUCC√àS!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    if (!hasValidSession) {
        console.log('‚úÖ PREMI√àRE CONNEXION R√âUSSIE');
        console.log('üîí Session sauvegard√©e pour les prochaines fois');
    } else {
        console.log('üöÄ RECONNEXION AUTOMATIQUE');
    }
    
    console.log(`üìû Admin: ${ADMIN_NUMBER.replace('@c.us', '')}`);
    console.log(`üïí Connect√©: ${new Date().toLocaleString('fr-FR')}`);
    console.log('‚úÖ Bot op√©rationnel');
    
    hasValidSession = true;
    
    // Envoyer un message de confirmation √† soi-m√™me
    try {
        const selfMessage = `üéâ *BOT CONNECT√â*\n\n‚úÖ Status: Op√©rationnel\nüïí Heure: ${new Date().toLocaleString('fr-FR')}\nüîí Session: ${hasValidSession ? 'Permanente' : 'Temporaire'}\n\nü§ñ Le bot est pr√™t √† recevoir des commandes!`;
        
        await client.sendMessage(ADMIN_NUMBER, selfMessage);
        console.log('üì© Message de confirmation envoy√©');
    } catch (error) {
        console.error('‚ùå Erreur envoi message confirmation:', error.message);
    }
});

client.on('authenticated', () => {
    console.log('üîê Session authentifi√©e avec succ√®s');
});

client.on('auth_failure', (msg) => {
    console.error('\n‚ùå √âCHEC AUTHENTIFICATION:', msg);
    
    // Nettoyer session corrompue
    if (fs.existsSync(SESSION_PATH)) {
        try {
            fs.rmSync(SESSION_PATH, { recursive: true, force: true });
            console.log('üóëÔ∏è Session corrompue supprim√©e');
        } catch (error) {
            console.error('‚ùå Erreur suppression session:', error.message);
        }
    }
    
    console.log('üîÑ RED√âMARREZ LE BOT pour reconnecter');
    stopWebServer();
    process.exit(1);
});

client.on('disconnected', (reason) => {
    console.log('\nüîå D√©connect√©:', reason);
    isReady = false;
    currentQR = null;
    
    if (reason === 'LOGOUT') {
        console.log('üì± D√©connexion manuelle depuis WhatsApp');
        if (fs.existsSync(SESSION_PATH)) {
            try {
                fs.rmSync(SESSION_PATH, { recursive: true, force: true });
                console.log('üóëÔ∏è Session supprim√©e');
            } catch (error) {
                console.error('‚ùå Erreur suppression session:', error.message);
            }
        }
        stopWebServer();
        process.exit(0);
    }
    
    // Reconnexion automatique
    console.log('üîÑ Reconnexion dans 15 secondes...');
    setTimeout(() => {
        console.log('üîÑ Tentative de reconnexion...');
        client.initialize().catch(error => {
            console.error('‚ùå Erreur reconnexion:', error.message);
        });
    }, 15000);
});

// Traitement des messages
client.on('message', async (message) => {
    if (!isReady) return;
    
    try {
        const contact = await message.getContact();
        const userNumber = contact.id._serialized;
        const messageText = message.body.trim();
        const chat = await message.getChat();
        
        // Ignorer ses propres messages
        if (contact.isMe) return;
        
        // Traiter seulement les commandes (messages commen√ßant par /)
        if (!messageText.startsWith('/')) return;
        
        const command = messageText.toLowerCase();
        
        // Commandes administrateur
        if (userNumber === ADMIN_NUMBER) {
            await handleAdminCommands(message, command, contact);
            return;
        }
        
        // Commande d'activation
        if (command.startsWith('/activate ')) {
            const codeInput = messageText.substring(10).trim();
            if (!codeInput) {
                await message.reply('‚ùå *Usage incorrect*\n\nüìù Format: `/activate XXXX XXXX`\nüí° Utilisez le code re√ßu de l\'admin');
                return;
            }
            
            if (validateAccessCode(userNumber, codeInput)) {
                const expiryDate = new Date(Date.now() + USAGE_DURATION).toLocaleDateString('fr-FR');
                await message.reply(`üéâ *ACC√àS ACTIV√â AVEC SUCC√àS!*\n\n‚úÖ *Statut:* Autoris√©\nüìÖ *Expire le:* ${expiryDate}\n‚è∞ *Dur√©e:* 30 jours\n\nüìã *Commandes disponibles:*\n‚Ä¢ \`/broadcast [message]\` - Diffuser\n‚Ä¢ \`/addgroup\` - Ajouter groupe\n‚Ä¢ \`/mygroups\` - Mes groupes\n‚Ä¢ \`/status\` - Mon statut\n‚Ä¢ \`/help\` - Aide\n\nüöÄ *Vous pouvez maintenant utiliser le bot!*`);
            } else {
                await message.reply('‚ùå *Code invalide*\n\nüîç *Raisons possibles:*\n‚Ä¢ Code incorrect\n‚Ä¢ Code d√©j√† utilis√©\n‚Ä¢ Code expir√© (24h)\n\nüí¨ Contactez l\'admin pour un nouveau code');
            }
            return;
        }
        
        // V√©rifier autorisation pour les autres commandes
        if (!isUserAuthorized(userNumber)) {
            await message.reply('üîí *Acc√®s requis*\n\n‚ùå Vous n\'√™tes pas autoris√© √† utiliser ce bot\n\nüîë *Pour activer:*\n1. Contactez l\'administrateur\n2. Utilisez: `/activate XXXX XXXX`\n\nüìû *Admin:* ' + ADMIN_NUMBER.replace('@c.us', ''));
            return;
        }
        
        // Commandes utilisateur autoris√©
        await handleUserCommands(message, command, userNumber, contact, chat);
        
    } catch (error) {
        console.error('‚ùå Erreur traitement message:', error.message);
        await message.reply('‚ùå *Erreur interne*\n\nUne erreur s\'est produite. R√©essayez plus tard.');
    }
});

// Gestion des commandes administrateur
async function handleAdminCommands(message, command, contact) {
    try {
        if (command.startsWith('/gencode ')) {
            const targetNumber = message.body.substring(9).trim();
            if (!targetNumber) {
                await message.reply('‚ùå *Usage incorrect*\n\nüìù Format: `/gencode [num√©ro]`\nüí° Exemple: `/gencode 237679199601`');
                return;
            }
            
            const formattedNumber = formatPhoneNumber(targetNumber);
            const code = generateAccessCode(formattedNumber);
            
            await message.reply(`‚úÖ *CODE G√âN√âR√â AVEC SUCC√àS*\n\nüë§ *Pour:* ${targetNumber}\nüîë *Code:* \`${code}\`\n‚è∞ *Valide:* 24 heures\nüìÖ *G√©n√©r√©:* ${new Date().toLocaleString('fr-FR')}\n\nüìù *Instructions pour l'utilisateur:*\nUtiliser: \`/activate ${code}\``);
            
        } else if (command === '/stats') {
            await sendAdminStats(message);
            
        } else if (command === '/listusers') {
            await sendUsersList(message);
            
        } else if (command.startsWith('/revoke ')) {
            const targetNumber = message.body.substring(8).trim();
            const formattedNumber = formatPhoneNumber(targetNumber);
            
            if (userData.users[formattedNumber]) {
                userData.users[formattedNumber].authorized = false;
                saveData();
                await message.reply(`‚úÖ *ACC√àS R√âVOQU√â*\n\nüë§ Utilisateur: ${targetNumber}\nüö´ Acc√®s supprim√©`);
            } else {
                await message.reply(`‚ùå Utilisateur non trouv√©: ${targetNumber}`);
            }
            
        } else if (command === '/cleanup') {
            cleanupExpiredData();
            await message.reply('üßπ *NETTOYAGE EFFECTU√â*\n\n‚úÖ Donn√©es expir√©es supprim√©es');
            
        } else if (command === '/reset') {
            if (fs.existsSync(SESSION_PATH)) {
                fs.rmSync(SESSION_PATH, { recursive: true, force: true });
                await message.reply('üîÑ *SESSION R√âINITIALIS√âE*\n\n‚ö†Ô∏è Red√©marrage requis pour reconnecter');
                setTimeout(() => process.exit(0), 2000);
            } else {
                await message.reply('‚ùå Aucune session √† r√©initialiser');
            }
            
        } else if (command === '/help') {
            await message.reply(`ü§ñ *COMMANDES ADMINISTRATEUR*\n\nüîë \`/gencode [num√©ro]\` - G√©n√©rer code\nüìä \`/stats\` - Statistiques\nüë• \`/listusers\` - Liste utilisateurs\nüö´ \`/revoke [num√©ro]\` - R√©voquer acc√®s\nüßπ \`/cleanup\` - Nettoyer donn√©es\nüîÑ \`/reset\` - Reset session\n‚ùì \`/help\` - Cette aide`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur commande admin:', error.message);
        await message.reply('‚ùå Erreur lors de l\'ex√©cution de la commande');
    }
}

// Gestion des commandes utilisateur
async function handleUserCommands(message, command, userNumber, contact, chat) {
    try {
        switch (command) {
            case '/status':
                await sendUserStatus(message, userNumber);
                break;
                
            case '/addgroup':
                if (!chat.isGroup) {
                    await message.reply('‚ùå *Commande pour groupes uniquement*\n\nüí° Utilisez cette commande dans un groupe WhatsApp');
                    return;
                }
                
                const groupId = chat.id._serialized;
                if (userData.groups[groupId]) {
                    await message.reply(`‚ÑπÔ∏è *Groupe d√©j√† enregistr√©*\n\nüìù Nom: ${chat.name}\nüë§ Ajout√© par: ${userData.groups[groupId].addedBy === userNumber ? 'Vous' : 'Autre utilisateur'}`);
                } else {
                    userData.groups[groupId] = {
                        name: chat.name,
                        addedBy: userNumber,
                        addedAt: Date.now()
                    };
                    saveData();
                    await message.reply(`‚úÖ *Groupe ajout√© avec succ√®s!*\n\nüìù *Nom:* ${chat.name}\nüìÖ *Ajout√© le:* ${new Date().toLocaleDateString('fr-FR')}\n\nüöÄ Vous pouvez maintenant diffuser des messages dans ce groupe!`);
                }
                break;
                
            case '/mygroups':
                await sendUserGroups(message, userNumber);
                break;
                
            case '/help':
                await message.reply(`ü§ñ *COMMANDES UTILISATEUR*\n\nüì¢ \`/broadcast [message]\` - Diffuser message\n‚ûï \` - Ajouter groupe\nüìã \`/mygroups\` - Mes groupes\nüìä \`/status\` - Mon statut\n‚ùì \`/help\` - Cette aide\n\nüí° *Exemple broadcast:*\n\`/broadcast Bonjour tout le monde!\``);
                break;
                
            default:
                if (command.startsWith('/broadcast ')) {
                    const broadcastMessage = message.body.substring(11).trim();
                    if (!broadcastMessage) {
                        await message.reply('‚ùå *Message vide*\n\nüìù Format: `/broadcast [votre message]`\nüí° Exemple: `/broadcast Bonjour √† tous!`');
                        return;
                    }
                    
                    await handleBroadcast(message, broadcastMessage, userNumber, contact);
                } else {
                    await message.reply('‚ùå *Commande inconnue*\n\nüìã Utilisez `/help` pour voir les commandes disponibles');
                }
                break;
        }
        
    } catch (error) {
        console.error('‚ùå Erreur commande utilisateur:', error.message);
        await message.reply('‚ùå Erreur lors de l\'ex√©cution de la commande');
    }
}

// Fonction de diffusion
async function handleBroadcast(message, broadcastMessage, userNumber, contact) {
    try {
        const userGroups = Object.keys(userData.groups).filter(groupId => 
            userData.groups[groupId].addedBy === userNumber
        );
        
        if (userGroups.length === 0) {
            await message.reply('‚ùå *Aucun groupe enregistr√©*\n\n‚ûï Utilisez `/addgroup` dans vos groupes d\'abord\nüìã Puis `/mygroups` pour voir la liste');
            return;
        }
        
        let successCount = 0;
        let failCount = 0;
        const results = [];
        
        // Message de d√©but de diffusion
        await message.reply(`üöÄ *DIFFUSION EN COURS...*\n\nüìä Groupes cibles: ${userGroups.length}\n‚è≥ Veuillez patienter...`);
        
        // Diffuser dans chaque groupe
        for (const groupId of userGroups) {
            try {
                const groupInfo = userData.groups[groupId];
                const fullMessage = `üì¢ *Message diffus√©*\nüë§ *De:* ${contact.pushname || contact.number}\nüìÖ *Le:* ${new Date().toLocaleString('fr-FR')}\n\n${broadcastMessage}`;
                
                await client.sendMessage(groupId, fullMessage);
                successCount++;
                results.push(`‚úÖ ${groupInfo.name}`);
                
                // D√©lai entre envois pour √©viter spam
                await new Promise(resolve => setTimeout(resolve, 1000));
                
            } catch (error) {
                console.error(`‚ùå Erreur diffusion groupe ${groupId}:`, error.message);
                failCount++;
                results.push(`‚ùå ${userData.groups[groupId]?.name || 'Groupe inconnu'}`);
            }
        }
        
        // Rapport final
        const reportMessage = `üìä *RAPPORT DE DIFFUSION*\n\n‚úÖ *Succ√®s:* ${successCount}\n‚ùå *√âchecs:* ${failCount}\nüìà *Total:* ${userGroups.length}\n\nüìã *D√©tails:*\n${results.join('\n')}\n\nüìÖ *Termin√© le:* ${new Date().toLocaleString('fr-FR')}`;
        
        await message.reply(reportMessage);
        
    } catch (error) {
        console.error('‚ùå Erreur broadcast:', error.message);
        await message.reply('‚ùå *Erreur de diffusion*\n\nUne erreur s\'est produite pendant la diffusion');
    }
}

// Envoyer les statistiques admin
async function sendAdminStats(message) {
    try {
        const totalUsers = Object.keys(userData.users).length;
        const activeUsers = Object.values(userData.users).filter(user => user.authorized).length;
        const pendingCodes = Object.keys(userData.accessCodes).length;
        const totalGroups = Object.keys(userData.groups).length;
        
        const statsMessage = `üìä *STATISTIQUES DU BOT*\n\nüë• *Utilisateurs:*\n‚Ä¢ Total: ${totalUsers}\n‚Ä¢ Actifs: ${activeUsers}\n‚Ä¢ Inactifs: ${totalUsers - activeUsers}\n\nüîë *Codes d'acc√®s:*\n‚Ä¢ En attente: ${pendingCodes}\n\nüì¢ *Groupes:*\n‚Ä¢ Enregistr√©s: ${totalGroups}\n\nüìÖ *Mis √† jour:* ${new Date().toLocaleString('fr-FR')}\nüü¢ *Statut:* Op√©rationnel`;
        
        await message.reply(statsMessage);
        
    } catch (error) {
        console.error('‚ùå Erreur stats:', error.message);
        await message.reply('‚ùå Erreur lors de la r√©cup√©ration des statistiques');
    }
}

// Envoyer la liste des utilisateurs
async function sendUsersList(message) {
    try {
        const users = Object.values(userData.users);
        if (users.length === 0) {
            await message.reply('üìã *LISTE UTILISATEURS*\n\n‚ùå Aucun utilisateur enregistr√©');
            return;
        }
        
        let usersList = 'üìã *LISTE DES UTILISATEURS*\n\n';
        users.forEach((user, index) => {
            const phone = user.phoneNumber.replace('@c.us', '');
            const status = user.authorized ? 'üü¢ Actif' : 'üî¥ Inactif';
            const expiry = user.authorized ? 
                new Date(user.authorizedAt + USAGE_DURATION).toLocaleDateString('fr-FR') : 
                'N/A';
            
            usersList += `*${index + 1}.* ${phone}\n${status} | Expire: ${expiry}\n\n`;
        });
        
        await message.reply(usersList);
        
    } catch (error) {
        console.error('‚ùå Erreur liste utilisateurs:', error.message);
        await message.reply('‚ùå Erreur lors de la r√©cup√©ration de la liste');
    }
}

// Envoyer le statut utilisateur
async function sendUserStatus(message, userNumber) {
    try {
        const user = userData.users[userNumber];
        if (!user) {
            await message.reply('‚ùå *Aucune donn√©es utilisateur*\n\nVous n\'√™tes pas encore enregistr√© dans le syst√®me');
            return;
        }
        
        const phone = userNumber.replace('@c.us', '');
        const isActive = user.authorized;
        const authorizedDate = user.authorizedAt ? 
            new Date(user.authorizedAt).toLocaleString('fr-FR') : 'N/A';
        const expiryDate = user.authorized ? 
            new Date(user.authorizedAt + USAGE_DURATION).toLocaleString('fr-FR') : 'N/A';
        
        const remainingTime = user.authorized ? 
            Math.max(0, Math.ceil((user.authorizedAt + USAGE_DURATION - Date.now()) / (24 * 60 * 60 * 1000))) : 0;
        
        const userGroups = Object.keys(userData.groups).filter(groupId => 
            userData.groups[groupId].addedBy === userNumber
        ).length;
        
        const statusMessage = `üìä *VOTRE STATUT*\n\nüë§ *T√©l√©phone:* ${phone}\nüîê *Statut:* ${isActive ? 'üü¢ Actif' : 'üî¥ Inactif'}\nüìÖ *Autoris√© le:* ${authorizedDate}\n‚è∞ *Expire le:* ${expiryDate}\nüìÜ *Jours restants:* ${remainingTime}\nüì¢ *Groupes:* ${userGroups}\n\nüìÖ *V√©rifi√© le:* ${new Date().toLocaleString('fr-FR')}`;
        
        await message.reply(statusMessage);
        
    } catch (error) {
        console.error('‚ùå Erreur statut utilisateur:', error.message);
        await message.reply('‚ùå Erreur lors de la r√©cup√©ration du statut');
    }
}

// Envoyer les groupes de l'utilisateur
async function sendUserGroups(message, userNumber) {
    try {
        const userGroups = Object.entries(userData.groups).filter(([groupId, groupData]) => 
            groupData.addedBy === userNumber
        );
        
        if (userGroups.length === 0) {
            await message.reply('üìã *MES GROUPES*\n\n‚ùå Aucun groupe enregistr√©\n\nüí° Utilisez `/addgroup` dans un groupe pour l\'ajouter');
            return;
        }
        
        let groupsList = `üìã *MES GROUPES* (${userGroups.length})\n\n`;
        userGroups.forEach(([groupId, groupData], index) => {
            const addedDate = new Date(groupData.addedAt).toLocaleDateString('fr-FR');
            groupsList += `*${index + 1}.* ${groupData.name}\nüìÖ Ajout√©: ${addedDate}\n\n`;
        });
        
        groupsList += `üí° *Total:* ${userGroups.length} groupe(s)\nüöÄ Utilisez \`/broadcast [message]\` pour diffuser`;
        
        await message.reply(groupsList);
        
    } catch (error) {
        console.error('‚ùå Erreur groupes utilisateur:', error.message);
        await message.reply('‚ùå Erreur lors de la r√©cup√©ration des groupes');
    }
}

// Gestion des erreurs globales
process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non g√©r√©e:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesse rejet√©e:', reason);
});

// Gestion de l'arr√™t propre
process.on('SIGINT', async () => {
    console.log('\nüõë Arr√™t du bot...');
    
    try {
        if (isReady) {
            await client.sendMessage(ADMIN_NUMBER, 'üõë *BOT ARR√äT√â*\n\nüìÖ Arr√™t: ' + new Date().toLocaleString('fr-FR'));
        }
        
        if (client) {
            await client.logout();
        }
        
        stopWebServer();
        saveData();
        
        console.log('‚úÖ Arr√™t propre effectu√©');
        process.exit(0);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'arr√™t:', error.message);
        process.exit(1);
    }
});

// Sauvegarde p√©riodique des donn√©es
setInterval(() => {
    if (isReady) {
        saveData();
        console.log('üíæ Sauvegarde automatique effectu√©e');
    }
}, 5 * 60 * 1000); // Toutes les 5 minutes

// D√©marrage du bot
async function startBot() {
    console.log('üöÄ D√âMARRAGE DU BOT WHATSAPP');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    try {
        // Charger les donn√©es
        if (!loadData()) {
            console.error('‚ùå Impossible de charger les donn√©es');
            process.exit(1);
        }
        
        // V√©rifier session existante
        const hasSession = checkExistingSession();
        console.log(`üîê Session existante: ${hasSession ? 'OUI' : 'NON'}`);
        
        if (hasSession) {
            console.log('üîÑ Tentative de connexion automatique...');
        } else {
            console.log('üì± Premi√®re connexion - QR Code requis');
        }
        
        // Initialiser le client
        await client.initialize();
        
    } catch (error) {
        console.error('‚ùå Erreur d√©marrage:', error.message);
        stopWebServer();
        process.exit(1);
    }
}

// Lancer le bot
console.log('ü§ñ WhatsApp Bot v2.0');
console.log('Made with ‚ù§Ô∏è for broadcasting');
console.log('');

startBot().catch(error => {
    console.error('‚ùå Erreur fatale:', error.message);
    process.exit(1);
});
